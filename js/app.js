/**
 * G≈Ç√≥wny plik aplikacji - inicjalizuje wszystkie komponenty i zarzƒÖdza aplikacjƒÖ
 * Uruchamia siƒô po za≈Çadowaniu wszystkich skrypt√≥w
 */
class TodoApp {
  constructor() {
    console.log('TodoApp constructor called.');
    this.storage = null;
    this.taskManager = null;
    this.userManager = null;
    this.dragDrop = null;
    this.taskComponent = null;
    this.userComponent = null;
    this.isInitialized = false;
  }

  /**
   * Inicjalizuje aplikacjƒô
   */
  async init() {
    console.log('TodoApp init() called.');
    try {
      this.checkDependencies();
      console.log("üöÄ Inicjalizacja aplikacji Lista Zada≈Ñ...");

      // Inicjalizuj komponenty w odpowiedniej kolejno≈õci
      this.initializeStorage();
      this.initializeManagers();
      this.initializeComponents();
      this.initializeDragDrop();

      // Ustaw globalne referencje dla ≈Çatwiejszego debugowania i dostƒôpu
      this.setGlobalReferences();

      // Za≈Çaduj dane i renderuj interfejs
      await this.loadInitialData();

      // Bind dodatkowych event listener√≥w
      this.bindGlobalEvents();

      this.isInitialized = true;
      console.log("‚úÖ Aplikacja zosta≈Ça zainicjalizowana pomy≈õlnie");

      // Poka≈º komunikat powitalny
      this.showWelcomeMessage();
    } catch (error) {
      console.error("‚ùå B≈ÇƒÖd podczas inicjalizacji aplikacji:", error);
      this.showError(
        "B≈ÇƒÖd podczas uruchamiania aplikacji. Sprawd≈∫ konsolƒô dla szczeg√≥≈Ç√≥w."
      );
    }
  }

  /**
   * Sprawdza czy wszystkie wymagane klasy sƒÖ dostƒôpne
   */
  checkDependencies() {
    const requiredClasses = [
      "Storage",
      "Task",
      "User",
      "TaskManager",
      "UserManager",
      "TaskComponent",
      "UserComponent",
      "DragDrop",
    ];

    const missingClasses = requiredClasses.filter((className) => {
      try {
        return (
          typeof window[className] === "undefined" || window[className] === null
        );
      } catch (e) {
        return true;
      }
    });

    if (missingClasses.length > 0) {
      throw new Error(`BrakujƒÖce klasy: ${missingClasses.join(", ")}`);
    }

    console.log("‚úÖ Wszystkie wymagane klasy sƒÖ dostƒôpne");
  }

  /**
   * Inicjalizuje storage
   */
  initializeStorage() {
    this.storage = new Storage();
    console.log("üì¶ Storage zainicjalizowany");
  }

  /**
   * Inicjalizuje managery
   */
  initializeManagers() {
    this.taskManager = new TaskManager(this.storage);
    this.userManager = new UserManager(this.storage, this.taskManager);
    console.log("üîß Managery zainicjalizowane");
  }

  /**
   * Inicjalizuje komponenty UI
   */
  initializeComponents() {
    this.userComponent = new UserComponent(this.userManager, this.taskManager);
    this.taskComponent = new TaskComponent(
      this.taskManager,
      this.userManager,
      null
    ); // dragDrop zostanie dodany p√≥≈∫niej
    console.log("üé® Komponenty UI zainicjalizowane");
  }

  /**
   * Inicjalizuje drag & drop
   */
  initializeDragDrop() {
    this.dragDrop = new DragDrop(this.taskManager, this.taskComponent);
    // Aktualizuj referencjƒô w taskComponent
    this.taskComponent.dragDrop = this.dragDrop;
    console.log("üñ±Ô∏è Drag & Drop zainicjalizowany");
  }

  /**
   * Ustawia globalne referencje
   */
  setGlobalReferences() {
    // Globalne referencje dla ≈Çatwiejszego dostƒôpu z HTML i debugowania
    window.app = this;
    window.storage = this.storage;
    window.taskManager = this.taskManager;
    window.userManager = this.userManager;
    window.taskComponent = this.taskComponent;
    window.userComponent = this.userComponent;
    window.dragDrop = this.dragDrop;

    console.log("üåç Globalne referencje ustawione");
  }

  /**
   * ≈Åaduje poczƒÖtkowe dane
   */
  async loadInitialData() {
    try {
      // Sprawd≈∫ czy to pierwsze uruchomienie
      const users = this.userManager.getAllUsers();
      const tasks = this.taskManager.getAllTasks();

      if (users.length === 0 && tasks.length === 0) {
        console.log(
          "üëã Pierwsze uruchomienie - tworzenie przyk≈Çadowych danych"
        );
        this.createSampleData();
      }

      // Renderuj komponenty
      this.userComponent.renderUsers();
      this.taskComponent.renderTasks();

      console.log("üìä Dane poczƒÖtkowe za≈Çadowane");
    } catch (error) {
      console.error("B≈ÇƒÖd podczas ≈Çadowania danych:", error);
    }
  }

  /**
   * Tworzy przyk≈Çadowe dane dla pierwszego uruchomienia
   */
  createSampleData() {
    // Dodaj przyk≈Çadowych u≈ºytkownik√≥w
    const user1 = this.userManager.addUser("Jan Kowalski");
    const user2 = this.userManager.addUser("Anna Nowak");

    if (user1 && user2) {
      // Ustaw pierwszego u≈ºytkownika jako aktywnego
      this.userManager.setActiveUser(user1.id);

      // Dodaj przyk≈Çadowe zadania
      this.taskManager.addTask(
        "Przygotowaƒá prezentacjƒô na spotkanie",
        user1.id,
        "high",
        "praca"
      );
      this.taskManager.addTask(
        "Kupiƒá produkty spo≈ºywcze",
        user1.id,
        "medium",
        "osobiste"
      );
      this.taskManager.addTask(
        "Przeczytaƒá ksiƒÖ≈ºkƒô o JavaScript",
        user2.id,
        "low",
        "nauka"
      );
      this.taskManager.addTask(
        "Zorganizowaƒá biurko",
        user2.id,
        "medium",
        "osobiste"
      );
      this.taskManager.addTask(
        "Napisaƒá raport miesiƒôczny",
        user1.id,
        "high",
        "praca"
      );

      // Oznacz jedno zadanie jako uko≈Ñczone
      const tasks = this.taskManager.getAllTasks();
      if (tasks.length > 0) {
        this.taskManager.toggleTaskStatus(tasks[2].id); // Trzecie zadanie
      }

      console.log("üìù Przyk≈Çadowe dane utworzone");
    }
  }

  /**
   * WiƒÖ≈ºe globalne event listenery
   */
  bindGlobalEvents() {
    // Autozapis co 30 sekund
    setInterval(() => {
      if (this.isInitialized) {
        this.autoSave();
      }
    }, 30000);

    // Zapisz przed zamkniƒôciem strony
    window.addEventListener("beforeunload", () => {
      this.autoSave();
    });

    // Obs≈Çuga skr√≥t√≥w klawiszowych
    document.addEventListener("keydown", (e) => {
      this.handleKeyboardShortcuts(e);
    });

    // Obs≈Çuga resize okna
    window.addEventListener("resize", () => {
      this.handleWindowResize();
    });

    // Obs≈Çuga stanu online/offline
    window.addEventListener("online", () => {
      this.showSuccess("Po≈ÇƒÖczenie internetowe zosta≈Ço przywr√≥cone");
    });

    window.addEventListener("offline", () => {
      this.showInfo("Aplikacja dzia≈Ça w trybie offline");
    });

    console.log("‚å®Ô∏è Globalne event listenery dodane");
  }

  /**
   * Obs≈Çuguje skr√≥ty klawiszowe
   * @param {KeyboardEvent} e - Zdarzenie klawiatury
   */
  handleKeyboardShortcuts(e) {
    // Ctrl/Cmd + S - zapisz dane
    if ((e.ctrlKey || e.metaKey) && e.key === "s") {
      e.preventDefault();
      this.saveAllData();
      this.showSuccess("Dane zosta≈Çy zapisane");
    }

    // Ctrl/Cmd + N - nowe zadanie (focus na input)
    if ((e.ctrlKey || e.metaKey) && e.key === "n") {
      e.preventDefault();
      const taskInput = document.getElementById("taskContent");
      if (taskInput) {
        taskInput.focus();
      }
    }

    // Ctrl/Cmd + U - nowy u≈ºytkownik (focus na input)
    if ((e.ctrlKey || e.metaKey) && e.key === "u") {
      e.preventDefault();
      const userInput = document.getElementById("newUserInput");
      if (userInput) {
        userInput.focus();
      }
    }

    // Escape - zamknij modalne okna
    if (e.key === "Escape") {
      const modal = document.getElementById("editModal");
      if (modal && !modal.classList.contains("hidden")) {
        this.taskComponent.closeEditModal();
      }
    }
  }

  /**
   * Obs≈Çuguje zmianƒô rozmiaru okna
   */
  handleWindowResize() {
    // Dostosuj layout dla urzƒÖdze≈Ñ mobilnych
    const isMobile = window.innerWidth < 768;

    if (isMobile && this.dragDrop) {
      // Wy≈ÇƒÖcz drag & drop na urzƒÖdzeniach dotykowych
      this.dragDrop.disableDragDrop();
    } else if (this.dragDrop) {
      // W≈ÇƒÖcz drag & drop na desktopie
      this.dragDrop.enableDragDrop();
    }
  }

  /**
   * Automatyczne zapisywanie danych
   */
  autoSave() {
    try {
      this.saveAllData();
      console.log("üíæ Autozapis wykonany");
    } catch (error) {
      console.error("B≈ÇƒÖd podczas autozapisu:", error);
    }
  }

  /**
   * Zapisuje wszystkie dane
   */
  saveAllData() {
    this.taskManager.saveTasks();
    this.userManager.saveUsers();
    this.userManager.saveActiveUser();
  }

  /**
   * Pokazuje komunikat powitalny
   */
  showWelcomeMessage() {
    const users = this.userManager.getAllUsers();
    const tasks = this.taskManager.getAllTasks();

    let message = "üéâ Witaj w Mened≈ºerze Zada≈Ñ!";

    if (users.length === 0) {
      message += "\n\nüìù Rozpocznij od dodania pierwszego u≈ºytkownika.";
    } else if (tasks.length === 0) {
      message +=
        "\n\n‚ú® Dodaj swoje pierwsze zadanie aby zaczƒÖƒá organizowaƒá swojƒÖ pracƒô.";
    } else {
      const activeUser = this.userManager.getActiveUser();
      if (activeUser) {
        const userStats = activeUser.getStats();
        message += `\n\nüëã Witaj ponownie, ${activeUser.name}!`;
        message += `\nüìä Masz ${userStats.totalTasks} zada≈Ñ, z czego ${userStats.completedTasks} uko≈Ñczonych.`;
      }
    }

    // Poka≈º komunikat po kr√≥tkiej chwili
    setTimeout(() => {
      this.showInfo(message);
    }, 1000);
  }

  /**
   * Eksportuje wszystkie dane aplikacji
   */
  exportAllData() {
    try {
      const allData = this.storage.exportAllData();
      const jsonString = JSON.stringify(allData, null, 2);

      const blob = new Blob([jsonString], { type: "application/json" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = `lista_zadan_backup_${
        new Date().toISOString().split("T")[0]
      }.json`;
      a.click();

      URL.revokeObjectURL(url);
      this.showSuccess("Kopia zapasowa zosta≈Ça utworzona");
    } catch (error) {
      console.error("B≈ÇƒÖd podczas eksportu:", error);
      this.showError("B≈ÇƒÖd podczas tworzenia kopii zapasowej");
    }
  }

  /**
   * Importuje dane z pliku
   * @param {File} file - Plik do importu
   */
  async importAllData(file) {
    try {
      const text = await file.text();
      const success = this.storage.importAllData(JSON.parse(text));

      if (success) {
        // Prze≈Çaduj aplikacjƒô z nowymi danymi
        await this.reloadApp();
        this.showSuccess("Dane zosta≈Çy zaimportowane pomy≈õlnie");
      } else {
        this.showError("B≈ÇƒÖd podczas importu danych");
      }
    } catch (error) {
      console.error("B≈ÇƒÖd podczas importu:", error);
      this.showError("B≈ÇƒÖd podczas importu danych. Sprawd≈∫ format pliku.");
    }
  }

  /**
   * Prze≈Çadowuje aplikacjƒô z nowymi danymi
   */
  async reloadApp() {
    try {
      // Prze≈Çaduj managery
      this.taskManager.loadTasks();
      this.userManager.loadUsers();
      this.userManager.loadActiveUser();

      // Renderuj komponenty
      this.userComponent.renderUsers();
      this.taskComponent.renderTasks();

      console.log("üîÑ Aplikacja prze≈Çadowana");
    } catch (error) {
      console.error("B≈ÇƒÖd podczas prze≈Çadowania aplikacji:", error);
    }
  }

  /**
   * Czy≈õci wszystkie dane aplikacji
   */
  clearAllData() {
    const totalUsers = this.userManager.getAllUsers().length;
    const totalTasks = this.taskManager.getAllTasks().length;

    if (totalUsers === 0 && totalTasks === 0) {
      this.showInfo("Brak danych do wyczyszczenia");
      return;
    }

    const message = `Czy na pewno chcesz wyczy≈õciƒá wszystkie dane?\n\nZostanie usuniƒôtych:\n‚Ä¢ ${totalUsers} u≈ºytkownik√≥w\n‚Ä¢ ${totalTasks} zada≈Ñ\n\nTej operacji nie mo≈ºna cofnƒÖƒá!`;

    if (confirm(message)) {
      try {
        this.storage.clearAllData();

        // Prze≈Çaduj aplikacjƒô
        this.reloadApp();

        this.showSuccess("Wszystkie dane zosta≈Çy wyczyszczone");

        // Poka≈º komunikat dla nowego u≈ºytkownika
        setTimeout(() => {
          this.showInfo(
            "Aplikacja zosta≈Ça zresetowana. Mo≈ºesz teraz dodaƒá nowych u≈ºytkownik√≥w i zadania."
          );
        }, 1500);
      } catch (error) {
        console.error("B≈ÇƒÖd podczas czyszczenia danych:", error);
        this.showError("B≈ÇƒÖd podczas czyszczenia danych");
      }
    }
  }

  /**
   * Pokazuje informacje o aplikacji
   */
  showAppInfo() {
    const storageInfo = this.storage.getStorageInfo();
    const userStats = this.userManager.getUsersStats();
    const totalTasks = this.taskManager.getAllTasks().length;

    const info = `
üì± Mened≈ºer Zada≈Ñ - Informacje o aplikacji

üìä Statystyki:
‚Ä¢ U≈ºytkownicy: ${userStats.totalUsers}
‚Ä¢ Zadania og√≥≈Çem: ${totalTasks}
‚Ä¢ ≈örednia zada≈Ñ na u≈ºytkownika: ${userStats.averageTasksPerUser}
‚Ä¢ ≈öredni procent uko≈Ñczenia: ${userStats.averageCompletionRate}%

üíæ Przechowywanie danych:
‚Ä¢ LocalStorage: ${storageInfo.available ? "Dostƒôpny" : "Niedostƒôpny"}
‚Ä¢ Wykorzystane miejsce: ${storageInfo.usedFormatted || "N/A"}
‚Ä¢ Procent wykorzystania: ${storageInfo.percentage || 0}%

‚ö° Funkcjonalno≈õci:
‚Ä¢ ‚úÖ ZarzƒÖdzanie zadaniami (CRUD)
‚Ä¢ ‚úÖ System u≈ºytkownik√≥w
‚Ä¢ ‚úÖ Priorytety i kategorie
‚Ä¢ ‚úÖ Filtrowanie i sortowanie
‚Ä¢ ‚úÖ Drag & Drop
‚Ä¢ ‚úÖ Autozapis
‚Ä¢ ‚úÖ Import/Export
‚Ä¢ ‚úÖ Animacje CSS

üîß Technologie:
‚Ä¢ Vanilla JavaScript (ES6+)
‚Ä¢ HTML5 & CSS3
‚Ä¢ Tailwind CSS
‚Ä¢ LocalStorage API
‚Ä¢ Drag & Drop API

‚å®Ô∏è Skr√≥ty klawiszowe:
‚Ä¢ Ctrl+S - Zapisz dane
‚Ä¢ Ctrl+N - Nowe zadanie
‚Ä¢ Ctrl+U - Nowy u≈ºytkownik
‚Ä¢ Esc - Zamknij modal

Wersja: 1.0.0
Data kompilacji: ${new Date().toLocaleDateString("pl-PL")}
      `;

    alert(info);
  }

  /**
   * Pokazuje statystyki aplikacji
   */
  showAppStats() {
    const userStats = this.userManager.getUsersStats();
    const tasks = this.taskManager.getAllTasks();
    const completedTasks = tasks.filter(
      (task) => task.status === "done"
    ).length;
    const pendingTasks = tasks.filter(
      (task) => task.status === "pending"
    ).length;

    // Statystyki priorytet√≥w
    const highPriorityTasks = tasks.filter(
      (task) => task.priority === "high"
    ).length;
    const mediumPriorityTasks = tasks.filter(
      (task) => task.priority === "medium"
    ).length;
    const lowPriorityTasks = tasks.filter(
      (task) => task.priority === "low"
    ).length;

    // Statystyki kategorii
    const workTasks = tasks.filter((task) => task.category === "praca").length;
    const studyTasks = tasks.filter((task) => task.category === "nauka").length;
    const hobbyTasks = tasks.filter((task) => task.category === "hobby").length;
    const personalTasks = tasks.filter(
      (task) => task.category === "osobiste"
    ).length;

    const stats = `
üìà Statystyki Aplikacji

üë• U≈ºytkownicy:
‚Ä¢ ≈ÅƒÖcznie: ${userStats.totalUsers}
‚Ä¢ Z zadaniami: ${userStats.usersWithTasks}
‚Ä¢ Bez zada≈Ñ: ${userStats.usersWithoutTasks}
‚Ä¢ Najbardziej produktywny: ${userStats.mostProductiveUser || "Brak"}
‚Ä¢ Najmniej produktywny: ${userStats.leastProductiveUser || "Brak"}

üìã Zadania - Status:
‚Ä¢ Wszystkie: ${tasks.length}
‚Ä¢ Uko≈Ñczone: ${completedTasks} (${
      tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0
    }%)
‚Ä¢ OczekujƒÖce: ${pendingTasks} (${
      tasks.length > 0 ? Math.round((pendingTasks / tasks.length) * 100) : 0
    }%)

üéØ Zadania - Priorytet:
‚Ä¢ Wysoki: ${highPriorityTasks}
‚Ä¢ ≈öredni: ${mediumPriorityTasks}
‚Ä¢ Niski: ${lowPriorityTasks}

üìÇ Zadania - Kategoria:
‚Ä¢ Praca: ${workTasks}
‚Ä¢ Nauka: ${studyTasks}
‚Ä¢ Hobby: ${hobbyTasks}
‚Ä¢ Osobiste: ${personalTasks}

üí™ Produktywno≈õƒá:
‚Ä¢ ≈örednia zada≈Ñ/u≈ºytkownik: ${userStats.averageTasksPerUser}
‚Ä¢ ≈öredni % uko≈Ñczenia: ${userStats.averageCompletionRate}%
‚Ä¢ Aktywny u≈ºytkownik: ${userStats.activeUser || "Brak"}
      `;

    alert(stats);
  }

  /**
   * Tworzy demo danych dla prezentacji
   */
  createDemoData() {
    if (
      !confirm(
        "Czy chcesz utworzyƒá przyk≈Çadowe dane demonstracyjne? To wyczy≈õci obecne dane."
      )
    ) {
      return;
    }

    try {
      // Wyczy≈õƒá obecne dane
      this.storage.clearAllData();
      this.reloadApp();

      // Dodaj u≈ºytkownik√≥w demo
      const users = [
        "Maria Kowalska",
        "Piotr Nowak",
        "Anna Wi≈õniewska",
        "Tomasz W√≥jcik",
      ];

      const createdUsers = users
        .map((name) => this.userManager.addUser(name))
        .filter(Boolean);

      if (createdUsers.length > 0) {
        // Ustaw pierwszego jako aktywnego
        this.userManager.setActiveUser(createdUsers[0].id);

        // Dodaj r√≥≈ºnorodne zadania
        const demoTasks = [
          {
            content: "Przygotowaƒá prezentacjƒô quarterly",
            user: 0,
            priority: "high",
            category: "praca",
          },
          {
            content: "Kupiƒá prezent na urodziny mamy",
            user: 0,
            priority: "medium",
            category: "osobiste",
          },
          {
            content: "Przeczytaƒá artyku≈Ç o React Hooks",
            user: 1,
            priority: "low",
            category: "nauka",
          },
          {
            content: "Zorganizowaƒá spotkanie zespo≈Çu",
            user: 1,
            priority: "high",
            category: "praca",
          },
          {
            content: "Naprawiƒá kran w ≈Çazience",
            user: 2,
            priority: "medium",
            category: "osobiste",
          },
          {
            content: "Uko≈Ñczyƒá kurs JavaScript",
            user: 2,
            priority: "high",
            category: "nauka",
          },
          {
            content: "Zaplanowaƒá weekendowy wypad",
            user: 3,
            priority: "low",
            category: "hobby",
          },
          {
            content: "Napisaƒá raport miesiƒôczny",
            user: 3,
            priority: "high",
            category: "praca",
          },
          {
            content: "PosprzƒÖtaƒá gara≈º",
            user: 0,
            priority: "low",
            category: "osobiste",
          },
          {
            content: "Obejrzeƒá tutorial o CSS Grid",
            user: 1,
            priority: "medium",
            category: "nauka",
          },
        ];

        demoTasks.forEach((task) => {
          if (createdUsers[task.user]) {
            this.taskManager.addTask(
              task.content,
              createdUsers[task.user].id,
              task.priority,
              task.category
            );
          }
        });

        // Oznacz niekt√≥re zadania jako uko≈Ñczone
        const allTasks = this.taskManager.getAllTasks();
        [0, 2, 4, 7].forEach((index) => {
          if (allTasks[index]) {
            this.taskManager.toggleTaskStatus(allTasks[index].id);
          }
        });

        this.showSuccess("Dane demonstracyjne zosta≈Çy utworzone!");
      }
    } catch (error) {
      console.error("B≈ÇƒÖd podczas tworzenia danych demo:", error);
      this.showError("B≈ÇƒÖd podczas tworzenia danych demonstracyjnych");
    }
  }

  /**
   * Pokazuje komunikat b≈Çƒôdu
   * @param {string} message - Wiadomo≈õƒá
   */
  showError(message) {
    console.error("ERROR:", message);

    // Spr√≥buj u≈ºyƒá systemu powiadomie≈Ñ je≈õli jest dostƒôpny
    if (this.dragDrop && this.dragDrop.createNotification) {
      this.showNotification(message, "error");
    } else {
      // Fallback - poka≈º alert i w konsoli
      alert(message);
    }
  }

  /**
   * Pokazuje komunikat informacyjny
   * @param {string} message - Wiadomo≈õƒá
   */
  showInfo(message) {
    console.info("INFO:", message);

    if (this.dragDrop && this.dragDrop.createNotification) {
      this.showNotification(message, "info");
    } else {
      alert(message);
    }
  }

  /**
   * Pokazuje komunikat sukcesu
   * @param {string} message - Wiadomo≈õƒá
   */
  showSuccess(message) {
    console.log("SUCCESS:", message);

    if (this.dragDrop && this.dragDrop.createNotification) {
      this.showNotification(message, "success");
    } else {
      // Dla sukcesu nie pokazuj alert, tylko w konsoli
      console.log(message);
    }
  }

  /**
   * Pokazuje powiadomienie
   * @param {string} message - Wiadomo≈õƒá
   * @param {string} type - Typ ('success', 'error', 'info')
   */
  showNotification(message, type = "info") {
    if (this.dragDrop && this.dragDrop.createNotification) {
      const notification = this.dragDrop.createNotification(message, type);
      this.dragDrop.showNotification(notification);
    } else {
      // Fallback dla przypadk√≥w gdy dragDrop nie jest dostƒôpny
      console.log(`${type.toUpperCase()}: ${message}`);
      alert(message);
    }
  }

  /**
   * Sprawdza czy aplikacja jest w trybie offline
   * @returns {boolean} True je≈õli offline
   */
  isOffline() {
    return !navigator.onLine;
  }

  /**
   * Zwraca informacje o aplikacji
   * @returns {Object} Informacje o aplikacji
   */
  getAppInfo() {
    return {
      version: "1.0.0",
      initialized: this.isInitialized,
      users: this.userManager?.getAllUsers().length || 0,
      tasks: this.taskManager?.getAllTasks().length || 0,
      activeUser: this.userManager?.getActiveUser()?.name || null,
      offline: this.isOffline(),
      storageAvailable: this.storage?.isLocalStorageAvailable() || false,
    };
  }

  /**
   * W≈ÇƒÖcza tryb debugowania
   */
  enableDebugMode() {
    console.warn("üîß Tryb debugowania W≈ÅƒÑCZONY.");
    console.log("Dostƒôpne obiekty globalne:");
    console.log("app:", window.app);
    console.log("storage:", window.storage);
    console.log("taskManager:", window.taskManager);
    console.log("userManager:", window.userManager);
    console.log("taskComponent:", window.taskComponent);
    console.log("userComponent:", window.userComponent);
    console.log("dragDrop:", window.dragDrop);
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const app = new TodoApp();
  app.init();
});
